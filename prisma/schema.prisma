generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MembershipRole {
  OWNER
  MEMBER
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

model Organization {
  id              String            @id @default(cuid())
  name            String
  slug            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  memberships     Membership[]
  invoices        Invoice[]
  metricSnapshots MetricSnapshot[]
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  memberships   Membership[]
  accounts      Account[]
  sessions      Session[]
}

model Membership {
  id             String          @id @default(cuid())
  role           MembershipRole  @default(MEMBER)
  userId         String
  organizationId String
  createdAt      DateTime        @default(now())

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization  Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Invoice {
  id             String         @id @default(cuid())
  organizationId String
  externalId     String?
  issuedAt       DateTime
  dueAt          DateTime?
  paidAt         DateTime?
  customerName   String
  amount         Decimal        @db.Decimal(14, 2)
  currency       String         @default("EUR")
  status         InvoiceStatus  @default(SENT)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, externalId])
}

model MetricSnapshot {
  id             String   @id @default(cuid())
  organizationId String
  cash           Decimal  @db.Decimal(14, 2)
  burn           Decimal  @db.Decimal(14, 2)
  runwayMonths   Decimal  @db.Decimal(10, 2)
  dso            Decimal  @db.Decimal(10, 2)
  computedFor    DateTime @default(now())
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
